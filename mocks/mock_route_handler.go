// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cfif1982/taxi/internal/application/routes/handlers (interfaces: RouteRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	routes "github.com/cfif1982/taxi/internal/domain/routes"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRouteRepositoryInterface is a mock of RouteRepositoryInterface interface.
type MockRouteRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteRepositoryInterfaceMockRecorder
}

// MockRouteRepositoryInterfaceMockRecorder is the mock recorder for MockRouteRepositoryInterface.
type MockRouteRepositoryInterfaceMockRecorder struct {
	mock *MockRouteRepositoryInterface
}

// NewMockRouteRepositoryInterface creates a new mock instance.
func NewMockRouteRepositoryInterface(ctrl *gomock.Controller) *MockRouteRepositoryInterface {
	mock := &MockRouteRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRouteRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteRepositoryInterface) EXPECT() *MockRouteRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddRoute mocks base method.
func (m *MockRouteRepositoryInterface) AddRoute(arg0 *routes.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoute indicates an expected call of AddRoute.
func (mr *MockRouteRepositoryInterfaceMockRecorder) AddRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockRouteRepositoryInterface)(nil).AddRoute), arg0)
}

// DeleteRoute mocks base method.
func (m *MockRouteRepositoryInterface) DeleteRoute(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockRouteRepositoryInterfaceMockRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockRouteRepositoryInterface)(nil).DeleteRoute), arg0)
}

// GetAllRoutes mocks base method.
func (m *MockRouteRepositoryInterface) GetAllRoutes() (*[]routes.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoutes")
	ret0, _ := ret[0].(*[]routes.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoutes indicates an expected call of GetAllRoutes.
func (mr *MockRouteRepositoryInterfaceMockRecorder) GetAllRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoutes", reflect.TypeOf((*MockRouteRepositoryInterface)(nil).GetAllRoutes))
}

// GetRouteByID mocks base method.
func (m *MockRouteRepositoryInterface) GetRouteByID(arg0 uuid.UUID) (*routes.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteByID", arg0)
	ret0, _ := ret[0].(*routes.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouteByID indicates an expected call of GetRouteByID.
func (mr *MockRouteRepositoryInterfaceMockRecorder) GetRouteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteByID", reflect.TypeOf((*MockRouteRepositoryInterface)(nil).GetRouteByID), arg0)
}

// SaveRoute mocks base method.
func (m *MockRouteRepositoryInterface) SaveRoute(arg0 *routes.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoute indicates an expected call of SaveRoute.
func (mr *MockRouteRepositoryInterfaceMockRecorder) SaveRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoute", reflect.TypeOf((*MockRouteRepositoryInterface)(nil).SaveRoute), arg0)
}
