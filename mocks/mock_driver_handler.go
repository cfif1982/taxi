// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cfif1982/taxi/internal/application/drivers/handlers (interfaces: DriverRepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	drivers "github.com/cfif1982/taxi/internal/domain/drivers"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDriverRepositoryInterface is a mock of DriverRepositoryInterface interface.
type MockDriverRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepositoryInterfaceMockRecorder
}

// MockDriverRepositoryInterfaceMockRecorder is the mock recorder for MockDriverRepositoryInterface.
type MockDriverRepositoryInterfaceMockRecorder struct {
	mock *MockDriverRepositoryInterface
}

// NewMockDriverRepositoryInterface creates a new mock instance.
func NewMockDriverRepositoryInterface(ctrl *gomock.Controller) *MockDriverRepositoryInterface {
	mock := &MockDriverRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockDriverRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepositoryInterface) EXPECT() *MockDriverRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddDriver mocks base method.
func (m *MockDriverRepositoryInterface) AddDriver(arg0 *drivers.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDriver indicates an expected call of AddDriver.
func (mr *MockDriverRepositoryInterfaceMockRecorder) AddDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDriver", reflect.TypeOf((*MockDriverRepositoryInterface)(nil).AddDriver), arg0)
}

// GetDriverByID mocks base method.
func (m *MockDriverRepositoryInterface) GetDriverByID(arg0 uuid.UUID) (*drivers.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByID", arg0)
	ret0, _ := ret[0].(*drivers.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByID indicates an expected call of GetDriverByID.
func (mr *MockDriverRepositoryInterfaceMockRecorder) GetDriverByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByID", reflect.TypeOf((*MockDriverRepositoryInterface)(nil).GetDriverByID), arg0)
}

// GetDriverByTelephone mocks base method.
func (m *MockDriverRepositoryInterface) GetDriverByTelephone(arg0 string) (*drivers.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByTelephone", arg0)
	ret0, _ := ret[0].(*drivers.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByTelephone indicates an expected call of GetDriverByTelephone.
func (mr *MockDriverRepositoryInterfaceMockRecorder) GetDriverByTelephone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByTelephone", reflect.TypeOf((*MockDriverRepositoryInterface)(nil).GetDriverByTelephone), arg0)
}

// SaveDriver mocks base method.
func (m *MockDriverRepositoryInterface) SaveDriver(arg0 *drivers.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDriver indicates an expected call of SaveDriver.
func (mr *MockDriverRepositoryInterfaceMockRecorder) SaveDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDriver", reflect.TypeOf((*MockDriverRepositoryInterface)(nil).SaveDriver), arg0)
}
